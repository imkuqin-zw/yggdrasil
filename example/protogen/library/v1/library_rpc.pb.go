// Code generated by protoc-gen-yggdrasil-rpc. DO NOT EDIT.

package librarypb

import (
	context "context"
	client "github.com/imkuqin-zw/yggdrasil/pkg/client"
	interceptor "github.com/imkuqin-zw/yggdrasil/pkg/interceptor"
	metadata "github.com/imkuqin-zw/yggdrasil/pkg/metadata"
	server "github.com/imkuqin-zw/yggdrasil/pkg/server"
	status "github.com/imkuqin-zw/yggdrasil/pkg/status"
	code "google.golang.org/genproto/googleapis/rpc/code"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the yggdrasil package it is being compiled against.
var _ = new(metadata.MD)

type LibraryServiceClient interface {
	CreateShelf(context.Context, *CreateShelfRequest) (*Shelf, error)
	GetShelf(context.Context, *GetShelfRequest) (*Shelf, error)
	ListShelves(context.Context, *ListShelvesRequest) (*ListShelvesResponse, error)
	DeleteShelf(context.Context, *DeleteShelfRequest) (*emptypb.Empty, error)
	MergeShelves(context.Context, *MergeShelvesRequest) (*Shelf, error)
	CreateBook(context.Context, *CreateBookRequest) (*Book, error)
	GetBook(context.Context, *GetBookRequest) (*Book, error)
	ListBooks(context.Context, *ListBooksRequest) (*ListBooksResponse, error)
	DeleteBook(context.Context, *DeleteBookRequest) (*emptypb.Empty, error)
	UpdateBook(context.Context, *UpdateBookRequest) (*Book, error)
	MoveBook(context.Context, *MoveBookRequest) (*Book, error)
}

type libraryServiceClient struct {
	cc client.Client
}

func NewLibraryServiceClient(cc client.Client) LibraryServiceClient {
	return &libraryServiceClient{cc}
}

func (c *libraryServiceClient) CreateShelf(ctx context.Context, in *CreateShelfRequest) (*Shelf, error) {
	out := new(Shelf)
	err := c.cc.Invoke(ctx, "/yggdrasil.example.proto.library.v1.LibraryService/CreateShelf", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetShelf(ctx context.Context, in *GetShelfRequest) (*Shelf, error) {
	out := new(Shelf)
	err := c.cc.Invoke(ctx, "/yggdrasil.example.proto.library.v1.LibraryService/GetShelf", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) ListShelves(ctx context.Context, in *ListShelvesRequest) (*ListShelvesResponse, error) {
	out := new(ListShelvesResponse)
	err := c.cc.Invoke(ctx, "/yggdrasil.example.proto.library.v1.LibraryService/ListShelves", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) DeleteShelf(ctx context.Context, in *DeleteShelfRequest) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/yggdrasil.example.proto.library.v1.LibraryService/DeleteShelf", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) MergeShelves(ctx context.Context, in *MergeShelvesRequest) (*Shelf, error) {
	out := new(Shelf)
	err := c.cc.Invoke(ctx, "/yggdrasil.example.proto.library.v1.LibraryService/MergeShelves", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) CreateBook(ctx context.Context, in *CreateBookRequest) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/yggdrasil.example.proto.library.v1.LibraryService/CreateBook", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetBook(ctx context.Context, in *GetBookRequest) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/yggdrasil.example.proto.library.v1.LibraryService/GetBook", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) ListBooks(ctx context.Context, in *ListBooksRequest) (*ListBooksResponse, error) {
	out := new(ListBooksResponse)
	err := c.cc.Invoke(ctx, "/yggdrasil.example.proto.library.v1.LibraryService/ListBooks", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) DeleteBook(ctx context.Context, in *DeleteBookRequest) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/yggdrasil.example.proto.library.v1.LibraryService/DeleteBook", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) UpdateBook(ctx context.Context, in *UpdateBookRequest) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/yggdrasil.example.proto.library.v1.LibraryService/UpdateBook", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) MoveBook(ctx context.Context, in *MoveBookRequest) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/yggdrasil.example.proto.library.v1.LibraryService/MoveBook", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _LibraryService_CreateShelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if unaryInt == nil {
		return srv.(LibraryServiceServer).CreateShelf(ctx, in)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yggdrasil.example.proto.library.v1.LibraryService/CreateShelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).CreateShelf(ctx, req.(*CreateShelfRequest))
	}
	return unaryInt(ctx, in, info, handler)
}

func _LibraryService_GetShelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if unaryInt == nil {
		return srv.(LibraryServiceServer).GetShelf(ctx, in)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yggdrasil.example.proto.library.v1.LibraryService/GetShelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetShelf(ctx, req.(*GetShelfRequest))
	}
	return unaryInt(ctx, in, info, handler)
}

func _LibraryService_ListShelves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShelvesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if unaryInt == nil {
		return srv.(LibraryServiceServer).ListShelves(ctx, in)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yggdrasil.example.proto.library.v1.LibraryService/ListShelves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).ListShelves(ctx, req.(*ListShelvesRequest))
	}
	return unaryInt(ctx, in, info, handler)
}

func _LibraryService_DeleteShelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if unaryInt == nil {
		return srv.(LibraryServiceServer).DeleteShelf(ctx, in)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yggdrasil.example.proto.library.v1.LibraryService/DeleteShelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).DeleteShelf(ctx, req.(*DeleteShelfRequest))
	}
	return unaryInt(ctx, in, info, handler)
}

func _LibraryService_MergeShelves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeShelvesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if unaryInt == nil {
		return srv.(LibraryServiceServer).MergeShelves(ctx, in)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yggdrasil.example.proto.library.v1.LibraryService/MergeShelves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).MergeShelves(ctx, req.(*MergeShelvesRequest))
	}
	return unaryInt(ctx, in, info, handler)
}

func _LibraryService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if unaryInt == nil {
		return srv.(LibraryServiceServer).CreateBook(ctx, in)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yggdrasil.example.proto.library.v1.LibraryService/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return unaryInt(ctx, in, info, handler)
}

func _LibraryService_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if unaryInt == nil {
		return srv.(LibraryServiceServer).GetBook(ctx, in)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yggdrasil.example.proto.library.v1.LibraryService/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetBook(ctx, req.(*GetBookRequest))
	}
	return unaryInt(ctx, in, info, handler)
}

func _LibraryService_ListBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if unaryInt == nil {
		return srv.(LibraryServiceServer).ListBooks(ctx, in)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yggdrasil.example.proto.library.v1.LibraryService/ListBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).ListBooks(ctx, req.(*ListBooksRequest))
	}
	return unaryInt(ctx, in, info, handler)
}

func _LibraryService_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if unaryInt == nil {
		return srv.(LibraryServiceServer).DeleteBook(ctx, in)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yggdrasil.example.proto.library.v1.LibraryService/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).DeleteBook(ctx, req.(*DeleteBookRequest))
	}
	return unaryInt(ctx, in, info, handler)
}

func _LibraryService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if unaryInt == nil {
		return srv.(LibraryServiceServer).UpdateBook(ctx, in)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yggdrasil.example.proto.library.v1.LibraryService/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).UpdateBook(ctx, req.(*UpdateBookRequest))
	}
	return unaryInt(ctx, in, info, handler)
}

func _LibraryService_MoveBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if unaryInt == nil {
		return srv.(LibraryServiceServer).MoveBook(ctx, in)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yggdrasil.example.proto.library.v1.LibraryService/MoveBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).MoveBook(ctx, req.(*MoveBookRequest))
	}
	return unaryInt(ctx, in, info, handler)
}

type LibraryServiceServer interface {
	CreateShelf(context.Context, *CreateShelfRequest) (*Shelf, error)
	GetShelf(context.Context, *GetShelfRequest) (*Shelf, error)
	ListShelves(context.Context, *ListShelvesRequest) (*ListShelvesResponse, error)
	DeleteShelf(context.Context, *DeleteShelfRequest) (*emptypb.Empty, error)
	MergeShelves(context.Context, *MergeShelvesRequest) (*Shelf, error)
	CreateBook(context.Context, *CreateBookRequest) (*Book, error)
	GetBook(context.Context, *GetBookRequest) (*Book, error)
	ListBooks(context.Context, *ListBooksRequest) (*ListBooksResponse, error)
	DeleteBook(context.Context, *DeleteBookRequest) (*emptypb.Empty, error)
	UpdateBook(context.Context, *UpdateBookRequest) (*Book, error)
	MoveBook(context.Context, *MoveBookRequest) (*Book, error)
	UnsafeLibraryServiceServer
}

type UnsafeLibraryServiceServer interface {
	mustEmbedUnimplementedLibraryServiceServer()
}

// UnimplementedLibraryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibraryServiceServer struct {
}

func (UnimplementedLibraryServiceServer) CreateShelf(context.Context, *CreateShelfRequest) (*Shelf, error) {
	return nil, status.Errorf(code.Code_UNIMPLEMENTED, "method CreateShelf not implemented")
}

func (UnimplementedLibraryServiceServer) GetShelf(context.Context, *GetShelfRequest) (*Shelf, error) {
	return nil, status.Errorf(code.Code_UNIMPLEMENTED, "method GetShelf not implemented")
}

func (UnimplementedLibraryServiceServer) ListShelves(context.Context, *ListShelvesRequest) (*ListShelvesResponse, error) {
	return nil, status.Errorf(code.Code_UNIMPLEMENTED, "method ListShelves not implemented")
}

func (UnimplementedLibraryServiceServer) DeleteShelf(context.Context, *DeleteShelfRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(code.Code_UNIMPLEMENTED, "method DeleteShelf not implemented")
}

func (UnimplementedLibraryServiceServer) MergeShelves(context.Context, *MergeShelvesRequest) (*Shelf, error) {
	return nil, status.Errorf(code.Code_UNIMPLEMENTED, "method MergeShelves not implemented")
}

func (UnimplementedLibraryServiceServer) CreateBook(context.Context, *CreateBookRequest) (*Book, error) {
	return nil, status.Errorf(code.Code_UNIMPLEMENTED, "method CreateBook not implemented")
}

func (UnimplementedLibraryServiceServer) GetBook(context.Context, *GetBookRequest) (*Book, error) {
	return nil, status.Errorf(code.Code_UNIMPLEMENTED, "method GetBook not implemented")
}

func (UnimplementedLibraryServiceServer) ListBooks(context.Context, *ListBooksRequest) (*ListBooksResponse, error) {
	return nil, status.Errorf(code.Code_UNIMPLEMENTED, "method ListBooks not implemented")
}

func (UnimplementedLibraryServiceServer) DeleteBook(context.Context, *DeleteBookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(code.Code_UNIMPLEMENTED, "method DeleteBook not implemented")
}

func (UnimplementedLibraryServiceServer) UpdateBook(context.Context, *UpdateBookRequest) (*Book, error) {
	return nil, status.Errorf(code.Code_UNIMPLEMENTED, "method UpdateBook not implemented")
}

func (UnimplementedLibraryServiceServer) MoveBook(context.Context, *MoveBookRequest) (*Book, error) {
	return nil, status.Errorf(code.Code_UNIMPLEMENTED, "method MoveBook not implemented")
}

func (UnimplementedLibraryServiceServer) mustEmbedUnimplementedLibraryServiceServer() {}

var LibraryServiceServiceDesc = server.ServiceDesc{
	ServiceName: "yggdrasil.example.proto.library.v1.LibraryService",
	HandlerType: (*LibraryServiceServer)(nil),
	Methods: []server.MethodDesc{
		{
			MethodName: "CreateShelf",
			Handler:    _LibraryService_CreateShelf_Handler,
		},
		{
			MethodName: "GetShelf",
			Handler:    _LibraryService_GetShelf_Handler,
		},
		{
			MethodName: "ListShelves",
			Handler:    _LibraryService_ListShelves_Handler,
		},
		{
			MethodName: "DeleteShelf",
			Handler:    _LibraryService_DeleteShelf_Handler,
		},
		{
			MethodName: "MergeShelves",
			Handler:    _LibraryService_MergeShelves_Handler,
		},
		{
			MethodName: "CreateBook",
			Handler:    _LibraryService_CreateBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _LibraryService_GetBook_Handler,
		},
		{
			MethodName: "ListBooks",
			Handler:    _LibraryService_ListBooks_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _LibraryService_DeleteBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _LibraryService_UpdateBook_Handler,
		},
		{
			MethodName: "MoveBook",
			Handler:    _LibraryService_MoveBook_Handler,
		},
	},
	Metadata: "library/v1/library.proto",
}
