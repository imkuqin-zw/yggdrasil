// Copyright 2022 The imkuqin-zw Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-yggdrasil-grpc. DO NOT EDIT.

package grpcimpl

import (
	context "context"
	helloword "github.com/imkuqin-zw/yggdrasil/example/protogen/helloword"
	md "github.com/imkuqin-zw/yggdrasil/pkg/md"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the yggdrasil package it is being compiled against.
var _ = new(metadata.MD)

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) helloword.GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *helloword.HelloRequest) (*helloword.HelloReply, error) {
	out := new(helloword.HelloReply)
	err := c.cc.Invoke(ctx, "/example.proto.helloword.Greeter/SayHello", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayHelloStream(ctx context.Context) (helloword.GreeterSayHelloStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreeterServiceDesc.Streams[0], "/example.proto.helloword.Greeter/SayHelloStream")
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloStreamClient{stream}
	return x, nil
}

type greeterSayHelloStreamClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloStreamClient) Header() (md.MD, error) {
	v, err := x.ClientStream.Header()
	if err != nil {
		return nil, err
	}
	return md.MD(v), nil
}

func (x *greeterSayHelloStreamClient) Trailer() md.MD {
	return md.MD(x.ClientStream.Trailer())
}

func (x *greeterSayHelloStreamClient) Send(m *helloword.HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterSayHelloStreamClient) Recv() (*helloword.HelloReply, error) {
	m := new(helloword.HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
func (c *greeterClient) SayHelloClientStream(ctx context.Context) (helloword.GreeterSayHelloClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreeterServiceDesc.Streams[1], "/example.proto.helloword.Greeter/SayHelloClientStream")
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloClientStreamClient{stream}
	return x, nil
}

type greeterSayHelloClientStreamClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloClientStreamClient) Header() (md.MD, error) {
	v, err := x.ClientStream.Header()
	if err != nil {
		return nil, err
	}
	return md.MD(v), nil
}

func (x *greeterSayHelloClientStreamClient) Trailer() md.MD {
	return md.MD(x.ClientStream.Trailer())
}

func (x *greeterSayHelloClientStreamClient) Send(m *helloword.HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (c *greeterClient) SayHelloServerStream(ctx context.Context, in *helloword.HelloRequest) (helloword.GreeterSayHelloServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreeterServiceDesc.Streams[2], "/example.proto.helloword.Greeter/SayHelloServerStream")
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type greeterSayHelloServerStreamClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloServerStreamClient) CloseAndRecv() (*helloword.HelloReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(helloword.HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *greeterSayHelloServerStreamClient) Recv() (*helloword.HelloReply, error) {
	m := new(helloword.HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *greeterSayHelloServerStreamClient) Header() (md.MD, error) {
	v, err := x.ClientStream.Header()
	if err != nil {
		return nil, err
	}
	return md.MD(v), nil
}

func (x *greeterSayHelloServerStreamClient) Trailer() md.MD {
	return md.MD(x.ClientStream.Trailer())
}

func (x *greeterSayHelloServerStreamClient) Send(m *helloword.HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(helloword.HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(helloword.GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.proto.helloword.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(helloword.GreeterServer).SayHello(ctx, req.(*helloword.HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayHelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(helloword.GreeterServer).SayHelloStream(&greeterSayHelloStreamServer{stream})
}

type greeterSayHelloStreamServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloStreamServer) SetHeader(md md.MD) error {
	return x.ServerStream.SetHeader(metadata.MD(md))
}

func (x *greeterSayHelloStreamServer) SendHeader(md md.MD) error {
	return x.ServerStream.SendHeader(metadata.MD(md))
}

func (x *greeterSayHelloStreamServer) SetTrailer(md md.MD) {
	x.ServerStream.SetTrailer(metadata.MD(md))
}

func (x *greeterSayHelloStreamServer) Context() context.Context {
	return x.ServerStream.Context()
}

func (x *greeterSayHelloStreamServer) Send(m *helloword.HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterSayHelloStreamServer) Recv() (*helloword.HelloRequest, error) {
	m := new(helloword.HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_SayHelloClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(helloword.GreeterServer).SayHelloClientStream(&greeterSayHelloClientStreamServer{stream})
}

type greeterSayHelloClientStreamServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloClientStreamServer) SetHeader(md md.MD) error {
	return x.ServerStream.SetHeader(metadata.MD(md))
}

func (x *greeterSayHelloClientStreamServer) SendHeader(md md.MD) error {
	return x.ServerStream.SendHeader(metadata.MD(md))
}

func (x *greeterSayHelloClientStreamServer) SetTrailer(md md.MD) {
	x.ServerStream.SetTrailer(metadata.MD(md))
}

func (x *greeterSayHelloClientStreamServer) Context() context.Context {
	return x.ServerStream.Context()
}

func (x *greeterSayHelloClientStreamServer) SendAndClose(m *helloword.HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterSayHelloClientStreamServer) Recv() (*helloword.HelloRequest, error) {
	m := new(helloword.HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_SayHelloServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(helloword.HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(helloword.GreeterServer).SayHelloServerStream(m, &greeterSayHelloServerStreamServer{stream})
}

type greeterSayHelloServerStreamServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloServerStreamServer) SetHeader(md md.MD) error {
	return x.ServerStream.SetHeader(metadata.MD(md))
}

func (x *greeterSayHelloServerStreamServer) SendHeader(md md.MD) error {
	return x.ServerStream.SendHeader(metadata.MD(md))
}

func (x *greeterSayHelloServerStreamServer) SetTrailer(md md.MD) {
	x.ServerStream.SetTrailer(metadata.MD(md))
}

func (x *greeterSayHelloServerStreamServer) Context() context.Context {
	return x.ServerStream.Context()
}

func (x *greeterSayHelloServerStreamServer) Send(m *helloword.HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

var GreeterServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.proto.helloword.Greeter",
	HandlerType: (*helloword.GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloStream",
			Handler:       _Greeter_SayHelloStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloClientStream",
			Handler:       _Greeter_SayHelloClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloServerStream",
			Handler:       _Greeter_SayHelloServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "helloword/helloworld.proto",
}
