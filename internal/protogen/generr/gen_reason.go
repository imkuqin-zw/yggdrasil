package genrpc

import (
	"fmt"

	error2 "github.com/imkuqin-zw/yggdrasil/proto/yggdrasil/error"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

func GenerateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_reason.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	generateHeader(g, file)
	generateFileContent(gen, file, g, true)
}

func generateHeader(g *protogen.GeneratedFile, file *protogen.File) {
	g.P("// Code generated by protoc-gen-yggdrasil-error. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
}

// generateFileContent generates the kratos errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, isServer bool) {
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the yggdrasil package it is being compiled against.")
	g.P()

	reasons := &Reasons{
		Domain: string(file.Desc.Package()),
	}
	for _, enum := range file.Enums {
		genErrorsReason(enum, reasons)
	}
	// If all enums do not contain 'errors.code', the current file is skipped
	if len(reasons.Reason) == 0 {
		g.Skip()
	}
	g.P(reasons.execute())
}

func genErrorsReason(enum *protogen.Enum, reasons *Reasons) {
	defaultCode := proto.GetExtension(enum.Desc.Options(), error2.E_DefaultReason)
	code := 0
	if ok := defaultCode.(int32); ok != 0 {
		code = int(ok)
	}
	if code > 600 || code < 0 {
		panic(fmt.Sprintf("Enum '%s' range must be greater than 0 and less than or equal to 600", string(enum.Desc.Name())))
	}
	reasons.Reason = append(reasons.Reason, ReasonWrapper{Name: string(enum.Desc.Name())})
}
