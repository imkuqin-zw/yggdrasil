// Code generated by protoc-gen-yggdrasil-rest. DO NOT EDIT.

package librarypb

import (
	context "context"
	v5 "github.com/go-chi/chi/v5"
	interceptor "github.com/imkuqin-zw/yggdrasil/pkg/interceptor"
	rest "github.com/imkuqin-zw/yggdrasil/pkg/rest"
	marshaler "github.com/imkuqin-zw/yggdrasil/pkg/rest/marshaler"
	server "github.com/imkuqin-zw/yggdrasil/pkg/server"
	status "github.com/imkuqin-zw/yggdrasil/pkg/status"
	code "google.golang.org/genproto/googleapis/rpc/code"
	io "io"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the yggdrasil package it is being compiled against.
var _ = new(marshaler.ProtoMarshaller)
var _ = io.EOF

func local_handler_LibraryService_CreateShelf_0(w http.ResponseWriter, r *http.Request, server interface{}, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	protoReq := &CreateShelfRequest{}

	inbound := marshaler.InboundFromContext(r.Context())
	if err := inbound.NewDecoder(r.Body).Decode(protoReq.Shelf); err != nil && err != io.EOF {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}

	info := &interceptor.UnaryServerInfo{
		Server:     server,
		FullMethod: "yggdrasil.example.proto.library.v1.LibraryService/CreateShelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return server.(LibraryServiceServer).CreateShelf(ctx, req.(*CreateShelfRequest))
	}
	return unaryInt(r.Context(), protoReq, info, handler)
}

func local_handler_LibraryService_GetShelf_0(w http.ResponseWriter, r *http.Request, server interface{}, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	protoReq := &GetShelfRequest{}
	if err := rest.PopulateQueryParameters(protoReq, r.Form); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}

	if val := "shelves/" + v5.URLParam(r, "params0"); len(val) == 0 {
		return nil, status.Errorf(code.Code_INVALID_ARGUMENT, "not found name")
	} else if err := rest.PopulateFieldFromPath(protoReq, "name", val); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     server,
		FullMethod: "yggdrasil.example.proto.library.v1.LibraryService/GetShelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return server.(LibraryServiceServer).GetShelf(ctx, req.(*GetShelfRequest))
	}
	return unaryInt(r.Context(), protoReq, info, handler)
}

func local_handler_LibraryService_ListShelves_0(w http.ResponseWriter, r *http.Request, server interface{}, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	protoReq := &ListShelvesRequest{}
	if err := rest.PopulateQueryParameters(protoReq, r.Form); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}

	info := &interceptor.UnaryServerInfo{
		Server:     server,
		FullMethod: "yggdrasil.example.proto.library.v1.LibraryService/ListShelves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return server.(LibraryServiceServer).ListShelves(ctx, req.(*ListShelvesRequest))
	}
	return unaryInt(r.Context(), protoReq, info, handler)
}

func local_handler_LibraryService_DeleteShelf_0(w http.ResponseWriter, r *http.Request, server interface{}, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	protoReq := &DeleteShelfRequest{}
	if err := rest.PopulateQueryParameters(protoReq, r.Form); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}

	if val := "shelves/" + v5.URLParam(r, "params0"); len(val) == 0 {
		return nil, status.Errorf(code.Code_INVALID_ARGUMENT, "not found name")
	} else if err := rest.PopulateFieldFromPath(protoReq, "name", val); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     server,
		FullMethod: "yggdrasil.example.proto.library.v1.LibraryService/DeleteShelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return server.(LibraryServiceServer).DeleteShelf(ctx, req.(*DeleteShelfRequest))
	}
	return unaryInt(r.Context(), protoReq, info, handler)
}

func local_handler_LibraryService_MergeShelves_0(w http.ResponseWriter, r *http.Request, server interface{}, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	protoReq := &MergeShelvesRequest{}

	inbound := marshaler.InboundFromContext(r.Context())
	if err := inbound.NewDecoder(r.Body).Decode(protoReq); err != nil && err != io.EOF {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}

	if val := "shelves/" + v5.URLParam(r, "params0"); len(val) == 0 {
		return nil, status.Errorf(code.Code_INVALID_ARGUMENT, "not found name")
	} else if err := rest.PopulateFieldFromPath(protoReq, "name", val); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     server,
		FullMethod: "yggdrasil.example.proto.library.v1.LibraryService/MergeShelves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return server.(LibraryServiceServer).MergeShelves(ctx, req.(*MergeShelvesRequest))
	}
	return unaryInt(r.Context(), protoReq, info, handler)
}

func local_handler_LibraryService_CreateBook_0(w http.ResponseWriter, r *http.Request, server interface{}, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	protoReq := &CreateBookRequest{}

	inbound := marshaler.InboundFromContext(r.Context())
	if err := inbound.NewDecoder(r.Body).Decode(protoReq.Book); err != nil && err != io.EOF {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}

	if val := "shelves/" + v5.URLParam(r, "params0"); len(val) == 0 {
		return nil, status.Errorf(code.Code_INVALID_ARGUMENT, "not found parent")
	} else if err := rest.PopulateFieldFromPath(protoReq, "parent", val); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     server,
		FullMethod: "yggdrasil.example.proto.library.v1.LibraryService/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return server.(LibraryServiceServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return unaryInt(r.Context(), protoReq, info, handler)
}

func local_handler_LibraryService_GetBook_0(w http.ResponseWriter, r *http.Request, server interface{}, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	protoReq := &GetBookRequest{}
	if err := rest.PopulateQueryParameters(protoReq, r.Form); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}

	if val := "shelves/" + v5.URLParam(r, "params0") + "/books/" + v5.URLParam(r, "params1"); len(val) == 0 {
		return nil, status.Errorf(code.Code_INVALID_ARGUMENT, "not found name")
	} else if err := rest.PopulateFieldFromPath(protoReq, "name", val); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     server,
		FullMethod: "yggdrasil.example.proto.library.v1.LibraryService/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return server.(LibraryServiceServer).GetBook(ctx, req.(*GetBookRequest))
	}
	return unaryInt(r.Context(), protoReq, info, handler)
}

func local_handler_LibraryService_ListBooks_0(w http.ResponseWriter, r *http.Request, server interface{}, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	protoReq := &ListBooksRequest{}
	if err := rest.PopulateQueryParameters(protoReq, r.Form); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}

	if val := "shelves/" + v5.URLParam(r, "params0"); len(val) == 0 {
		return nil, status.Errorf(code.Code_INVALID_ARGUMENT, "not found parent")
	} else if err := rest.PopulateFieldFromPath(protoReq, "parent", val); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     server,
		FullMethod: "yggdrasil.example.proto.library.v1.LibraryService/ListBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return server.(LibraryServiceServer).ListBooks(ctx, req.(*ListBooksRequest))
	}
	return unaryInt(r.Context(), protoReq, info, handler)
}

func local_handler_LibraryService_DeleteBook_0(w http.ResponseWriter, r *http.Request, server interface{}, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	protoReq := &DeleteBookRequest{}
	if err := rest.PopulateQueryParameters(protoReq, r.Form); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}

	if val := "shelves/" + v5.URLParam(r, "params0") + "/books/" + v5.URLParam(r, "params1"); len(val) == 0 {
		return nil, status.Errorf(code.Code_INVALID_ARGUMENT, "not found name")
	} else if err := rest.PopulateFieldFromPath(protoReq, "name", val); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     server,
		FullMethod: "yggdrasil.example.proto.library.v1.LibraryService/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return server.(LibraryServiceServer).DeleteBook(ctx, req.(*DeleteBookRequest))
	}
	return unaryInt(r.Context(), protoReq, info, handler)
}

func local_handler_LibraryService_UpdateBook_0(w http.ResponseWriter, r *http.Request, server interface{}, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	protoReq := &UpdateBookRequest{}

	inbound := marshaler.InboundFromContext(r.Context())
	if err := inbound.NewDecoder(r.Body).Decode(protoReq.Book); err != nil && err != io.EOF {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}

	if val := "shelves/" + v5.URLParam(r, "params0") + "/books/" + v5.URLParam(r, "params1"); len(val) == 0 {
		return nil, status.Errorf(code.Code_INVALID_ARGUMENT, "not found book.name")
	} else if err := rest.PopulateFieldFromPath(protoReq, "book.name", val); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     server,
		FullMethod: "yggdrasil.example.proto.library.v1.LibraryService/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return server.(LibraryServiceServer).UpdateBook(ctx, req.(*UpdateBookRequest))
	}
	return unaryInt(r.Context(), protoReq, info, handler)
}

func local_handler_LibraryService_MoveBook_0(w http.ResponseWriter, r *http.Request, server interface{}, unaryInt interceptor.UnaryServerInterceptor) (interface{}, error) {
	protoReq := &MoveBookRequest{}

	inbound := marshaler.InboundFromContext(r.Context())
	if err := inbound.NewDecoder(r.Body).Decode(protoReq); err != nil && err != io.EOF {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}

	if val := "shelves/" + v5.URLParam(r, "params0") + "/books/" + v5.URLParam(r, "params1"); len(val) == 0 {
		return nil, status.Errorf(code.Code_INVALID_ARGUMENT, "not found name")
	} else if err := rest.PopulateFieldFromPath(protoReq, "name", val); err != nil {
		return nil, status.New(code.Code_INVALID_ARGUMENT, err)
	}
	info := &interceptor.UnaryServerInfo{
		Server:     server,
		FullMethod: "yggdrasil.example.proto.library.v1.LibraryService/MoveBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return server.(LibraryServiceServer).MoveBook(ctx, req.(*MoveBookRequest))
	}
	return unaryInt(r.Context(), protoReq, info, handler)
}

var LibraryServiceRestServiceDesc = server.RestServiceDesc{
	HandlerType: (*LibraryServiceServer)(nil),
	Methods: []server.RestMethodDesc{
		{
			Method:  "POST",
			Path:    "/v1/shelves",
			Handler: local_handler_LibraryService_CreateShelf_0,
		},
		{
			Method:  "GET",
			Path:    "/v1/shelves/{params0}",
			Handler: local_handler_LibraryService_GetShelf_0,
		},
		{
			Method:  "GET",
			Path:    "/v1/shelves",
			Handler: local_handler_LibraryService_ListShelves_0,
		},
		{
			Method:  "DELETE",
			Path:    "/v1/shelves/{params0}",
			Handler: local_handler_LibraryService_DeleteShelf_0,
		},
		{
			Method:  "POST",
			Path:    "/v1/shelves/{params0}:merge",
			Handler: local_handler_LibraryService_MergeShelves_0,
		},
		{
			Method:  "POST",
			Path:    "/v1/shelves/{params0}/books",
			Handler: local_handler_LibraryService_CreateBook_0,
		},
		{
			Method:  "GET",
			Path:    "/v1/shelves/{params0}/books/{params1}",
			Handler: local_handler_LibraryService_GetBook_0,
		},
		{
			Method:  "GET",
			Path:    "/v1/shelves/{params0}/books",
			Handler: local_handler_LibraryService_ListBooks_0,
		},
		{
			Method:  "DELETE",
			Path:    "/v1/shelves/{params0}/books/{params1}",
			Handler: local_handler_LibraryService_DeleteBook_0,
		},
		{
			Method:  "PATCH",
			Path:    "/v1/shelves/{params0}/books/{params1}",
			Handler: local_handler_LibraryService_UpdateBook_0,
		},
		{
			Method:  "POST",
			Path:    "/v1/shelves/{params0}/books/{params1}:move",
			Handler: local_handler_LibraryService_MoveBook_0,
		},
	},
}
